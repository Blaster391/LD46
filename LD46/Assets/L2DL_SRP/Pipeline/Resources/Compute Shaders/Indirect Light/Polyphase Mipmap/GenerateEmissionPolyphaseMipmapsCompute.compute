#pragma kernel GenerateEmissionMipmaps MIPMETHOD_FILTER22
#pragma kernel GenerateEmissionMipmaps MIPMETHOD_FILTER23
#pragma kernel GenerateEmissionMipmaps MIPMETHOD_FILTER32
#pragma kernel GenerateEmissionMipmaps MIPMETHOD_FILTER33

#include "GeneratePolyphaseMipmapsCompute.hlsl"

float4 Sample(uint2 texel)
{
	return LowerMipTex.Load(texel);
}

// So the only difference is the Sample and that the Max versions are changes to the Av versions
// I could force the Max versions to call the Av version when a given keyword is called but it seems a little confusing
// There's only 2 version for now so leave it as is

// THIS DOESN'T ACTUALLY DO WHAT IT'S MEANT TO
// It doesn't do anything for the B channel
// I don't think it needs to do each channel separatetly either. Not really sure how this all works now.

[numthreads(8, 8, 1)]
void GenerateEmissionMipmaps(uint3 id : SV_DispatchThreadID)
{
	//Get the input texel location by doubling the output texels position
	uint2 texel = id.xy * 2;

	//Calculate offsets once
	float4 col = float4(0, 0, 0, 1);

	uint left1 = texel.x - 1;
	uint right1 = texel.x + 1;
	uint right2 = texel.x + 2;

	uint down1 = texel.y - 1;
	uint up1 = texel.y + 1;
	uint up2 = texel.y + 2;

#if MIPMETHOD_FILTER22

	//4x4 Box Filter
	// ##
	// ##

	float4 val00 = Sample(uint2(texel.x, texel.y));
	float4 val10 = Sample(uint2(right1, texel.y));
	float4 val01 = Sample(uint2(texel.x, up1));
	float4 val11 = Sample(uint2(right1, up1));
	
	col = standardFilterAv(
		standardFilterAv(val00, val10),
		standardFilterAv(val01, val11)
	);

#elif MIPMETHOD_FILTER23

	//2x3 filtering
	//=+x, =+2y
	// ##
	// ##
	// ##

	float4 val00 = Sample(float2(texel.x, texel.y));
	float4 val01 = Sample(float2(texel.x, up1));
	float4 val02 = Sample(float2(texel.x, up2));
	float4 val10 = Sample(float2(right1, texel.y));
	float4 val11 = Sample(float2(right1, up1));
	float4 val12 = Sample(float2(right1, up2));

	col = polyFilterAv(texel,
		standardFilterAv(val00, val10),
		standardFilterAv(val01, val11),
		standardFilterAv(val02, val12),
		1	//index 1 as we're polyfiltering along the y
	);

#elif MIPMETHOD_FILTER32

	//3x2 filter
	//=+2x, =+y
	// ###
	// ###

	float4 val00 = Sample(float2(texel.x, texel.y));
	float4 val10 = Sample(float2(right1, texel.y));
	float4 val20 = Sample(float2(right2, texel.y));
	float4 val01 = Sample(float2(texel.x, up1));
	float4 val11 = Sample(float2(right1, up1));
	float4 val21 = Sample(float2(right2, up1));

	col = standardFilterAv(
		polyFilterAv(texel, val00, val10, val20, 0),
		polyFilterAv(uint2(texel.x, up1), val01, val11, val21, 0)
	);

#else //if MIPMETHOD_FILTER33

	//3x3 filter
	//=+2x, =+2y
	// ###
	// ###
	// ###

	float4 val00 = Sample(float2(texel.x, texel.y));
	float4 val10 = Sample(float2(right1, texel.y));
	float4 val20 = Sample(float2(right2, texel.y));
	float4 val01 = Sample(float2(texel.x, up1));
	float4 val11 = Sample(float2(right1, up1));
	float4 val21 = Sample(float2(right2, up1));
	float4 val02 = Sample(float2(texel.x, up2));
	float4 val12 = Sample(float2(right1, up2));
	float4 val22 = Sample(float2(right2, up2));

	col = polyFilterAv(float2(texel.x, texel.y),
		polyFilterAv(float2(texel.x, texel.y), val00, val10, val20, 0),
		polyFilterAv(float2(texel.x, up1), val01, val11, val21, 0),
		polyFilterAv(float2(texel.x, up2), val02, val12, val22, 0),
		1
	);

#endif

	HigherMipTex[id.xy] = col;
}
